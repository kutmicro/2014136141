#include <Wire.h>//I2C통신을 위한 헤더
#include "Adafruit_MPR121.h"

Adafruit_MPR121 cap = Adafruit_MPR121();
//버튼 인스턴스 생성

uint16_t Last_Touched = 0;//2바이트 변수
uint16_t Current_Touched = 0;

void setup() {
  while (!Serial);
  Serial.begin(9600);
  Serial.println("Adafruit MPR121 Capacitive Touch sensor test");

  if (!cap.begin(0x5A)) { //통신을 초기화하는 코드
    Serial.println("MPR121 not found, check wiring?");
    while (1);
  }
  Serial.println("MPR121 found!");
}
//모듈과의 연결 통신 초기화 코드
//ADD핀을 사용치 않을시 I2C주소는 0x5A,
//ADD를 3V에 연결시 0x5B, SDA연결시 0x5C,
//SCL연결시0x5D

void loop() {
  Current_Touched = cap.touched(); //하위비트 0번부터 11번까지에 버튼의 터치여부가 들어온다.
  for (uint8_t i = 0; i < 12; i++) {
    if ((Current_Touched & _BV(i)) && !(Last_Touched & _BV(i)) ) {
      Serial.print(i); Serial.println(" touched");
    }
    if (!(Current_Touched & _BV(i)) && (Last_Touched & _BV(i)) ) {
      Serial.print(i); Serial.println(" released");
    }
  }
  Last_Touched = Current_Touched;
  return;
}


/*
uint16_t  Adafruit_MPR121::touched(void) {
uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
return t & 0x0FFF;
}

uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
Wire.beginTransmission(_i2caddr);
Wire.write(reg);
Wire.endTransmission(false);
while (Wire.requestFrom(_i2caddr, 1) != 1);
return ( Wire.read());
}

Wire.begin(address)
I2C 통신을 초기화하고, 활성화하는 함수. 슬레이브 모드일 경우 자신의 주소 값을 지정한다.
지정하지 않을 경우 자동으로 마스터 모드로 설정된다. 
통신을 시작하기 전 한 번만 호출하면 된다.

Wire.beginTransmission(address)
마스터에서 전송을 시작하기 위해 슬레이브의 주소 값을 지정한다.
슬레이브 주소 값이 데이터 버퍼에 저장되어 전송될 준비를 한다.
실제로 Wire.beginTransmission() 함수가 호출된 시점에 전송되지는 않고,
데이터 버퍼에 데이터를 저장한 후 Wire.endTransmission() 함수가 호출될 때 한꺼번에 전송된다.

Wire.write(value)
마스터 모드에서는 Wire.beginTransmission() 함수가 호출된 후 데이터 버퍼에 실제로 전송될 데이터를 저장하는 함수이다. 
Wire.write() 함수로 버퍼에 저장된 데이터는 Wire.endTransmission() 함수가 호출될 때 한꺼번에 전송된다. 
슬레이브 모드에서는 마스터로부터 데이터 요청이 있을 때 요청에 대한 데이터를 전송하기 위해 사용된다.
이 때는 마스터에서 생성되는 클럭 신호에 맞춰 자동으로 전송된다.



*/

/*
12개 버튼이 모두 인식된 상태면 0000 1111 1111 1111이 들어온다.

_BV(bit) 매크로는 이곳에 정의 (arduino-0015/hardware/tools/avr/avr/include/avr/sfr_defs.h)
비트 연산을 하는 매크로인데 1(이진수 표현=B0000 0001) 을 지정된 bit 값 만큼 왼쪽으로 이동(shift) 시켜줍니다.
따라서 _BV(7)은 1(=B0000 0001)을 왼쪽으로 7번 shift 시켜주므로 아래와 같은 값으로 바뀌게 됩니다.
B1000 0000

터치감도 바꾸기 
beginI()초기화
setThreshholeds(uint8_t touch, uint8_t release)호출
(초기 touch값 12, release값 6)
*/